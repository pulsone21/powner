package partials

import (
	"fmt"
	"github.com/pulsone21/powner/internal/entities"
	"github.com/pulsone21/powner/internal/errx"
	"github.com/pulsone21/powner/internal/service"
	"github.com/pulsone21/powner/internal/ui/components"
	"github.com/pulsone21/powner/internal/ui/shared"
)

templ MemberForm(errMap errx.ErrorMap) {
	<div id="formContainer">
		<div
			class="bg-mantle h-full flex flex-col items-center"
		>
			<h4 class="font-extrabold text-red text-2xl">{ "New Member" }</h4>
			<form
				id="memberForm"
				autocomplete="off"
				class="flex h-full justify-between w-5/6 flex-col items-center"
				hx-post="/partials/forms/members/add"
				hx-target="#formContainer"
				hx-swap="outerHTML"
			>
				<div class="w-full h-full">
					@shared.Input(templ.Attributes{"placeholder": "Name", "id": "name", "name": "name", "type": "text"}, errMap.Get("name"))
					@shared.Input(templ.Attributes{"placeholder": "Age", "id": "age", "name": "age", "type": "number"}, errMap.Get("age"))
				</div>
				<div class="h-12 w-full mt-2">
					@shared.Button("Save member", "", templ.Attributes{"type": "submit"})
				</div>
			</form>
		</div>
	</div>
}

templ MemberInfo(mem entities.Member) {
	//TODO: Form Post route is wrong (old one)
	<div class="w-full h-full bg-base flex-col flex items-center rounded-lg p-3">
		<div class="w-full h-16 flex flex-col bg-mantle p-2 rounded-lg">
			<h3 class="text-lavender font-extrabold text-xl">{ mem.Name }</h3>
			<p>{ fmt.Sprintf("Age: %v",mem.Age) }</p>
		</div>
		<div
			class="w-full h-full mt-1 flex flex-row rounded-lg"
		>
			<div
				class="h-full w-1/3 mr-1 flex flex-col bg-mantle rounded-lg"
				hx-get={ fmt.Sprintf("/api/member/%v/skill", mem.ID) }
				hx-trigger="skillRatingChange from:body"
			>
				@SkillAdjustList(mem)
			</div>
			<div class="w-2/3 h-full flex gap-1 flex-row bg-mantle rounded-lg divide-x-2 divide-base">
				<div class="w-1/2 h-full p-2" hx-get={ fmt.Sprintf("/api/skill?memID=%v", mem.ID) } hx-trigger="load"></div>
				<div class="w-1/2 h-full p-2" hx-get={ fmt.Sprintf("/api/team?memID=%v", mem.ID) } hx-trigger="load"></div>
			</div>
		</div>
	</div>
}

templ MemberList(mems []entities.Member, itemFunc components.MemberItemAddon) {
	<div
		class="h-full"
		hx-get="/partials/members/list"
		hx-swap="outerHTML"
		hx-trigger={ fmt.Sprintf("%v from:body, %v from:body, every 600s", service.CreateMemberEvent, service.DeleteMemberEvent) }
	>
		if len(mems) > 0 {
			<ul role="list" class="scroll-smooth h-full overflow-y-auto divide-y-2 divide-base flex flex-col gap-2">
				for _, t := range mems {
					@MemberListItem(t, itemFunc)
				}
			</ul>
		} else {
			<p class="text-overlay1">
				{ "No members found" }
			</p>
		}
	</div>
}

templ MemberListItem(m entities.Member, itemFunc components.MemberItemAddon) {
	<li
		class="min-h-10 justify-between flex flex-row rounded-lg p-1 cursor-pointer hover:opacity-70 transition"
	>
		<div
			class="flex flex-col max-w-1/2 flex-grow min-w-0"
			hx-get={ fmt.Sprintf("/partials/members/details/%v", m.ID) }
			hx-target="#memebrDetails"
			hx-swap="innerHTML"
			hx-replace-url={ fmt.Sprintf("/members/%v", m.ID) }
		>
			<p
				class="font-bold truncate min-w-0"
				title={ m.Name }
			>{ m.Name }</p>
			<p
				class="text-subtext0 truncate min-w-0"
				title={ fmt.Sprint(m.Age) }
			>{ fmt.Sprintf("Age: %v",m.Age) }</p>
		</div>
		if itemFunc != nil {
			<div class="flex flex-row justify-center ml-4 items-center">
				@itemFunc(m)
			</div>
		}
	</li>
}

templ MemberTeamListItem(m entities.Member, teamID uint, add bool) {
	<li
		class="min-h-10 justify-between flex flex-row rounded-lg p-1 hover:opacity-70 transition"
	>
		<div>
			<p
				class="font-bold truncate min-w-0"
				title={ m.Name }
			>{ m.Name }</p>
			<p
				class="text-subtext0 truncate min-w-0"
				title={ fmt.Sprint(m.Age) }
			>{ fmt.Sprintf("Age: %v",m.Age) }</p>
		</div>
		<div class="flex flex-row justify-center ml-4 items-center">
			if add {
				@shared.AddButton(templ.Attributes{
					"hx-trigger": "click",
					"hx-get":     fmt.Sprintf("/partials/teams/%v/members/%v", teamID, m.ID),
					"hx-target":  "closest li",
					"hx-swap":    "delete",
				}, "", "Add")
			} else {
				@shared.RemoveButton(templ.Attributes{
					"hx-trigger": "click",
					"hx-delete":  fmt.Sprintf("/partials/teams/%v/members/%v", teamID, m.ID),
					"hx-target":  "closest li",
					"hx-swap":    "delete",
				}, "", "Remove")
			}
		</div>
	</li>
}

templ MemberAddTeamList(mems []entities.Member, teamID uint) {
	<div
		class="h-full"
		hx-get={ fmt.Sprintf("/partials/members/list?teamID=%v", teamID) }
		hx-swap="outerHTML"
		hx-trigger={ fmt.Sprintf("%v from:body,  %v from:body, every 600s", service.CreateMemberEvent, service.DeleteMemberEvent) }
	>
		if len(mems) > 0 {
			<ul role="list" class="scroll-smooth h-full overflow-y-auto divide-y-2 divide-base flex flex-col gap-2">
				for _, m := range mems {
					@MemberTeamListItem(m, teamID, true)
				}
			</ul>
		} else {
			<p class="text-overlay1">
				{ "No members found" }
			</p>
		}
	</div>
}
