package partials

import (
	"fmt"
	cmp "github.com/axzilla/templui/components"
	"github.com/pulsone21/powner/internal/entities"
	"github.com/pulsone21/powner/internal/service"
	"github.com/pulsone21/powner/internal/ui/components"
	"github.com/pulsone21/powner/internal/ui/shared"
)

templ MemberInfo(mem entities.Member) {
	//TODO: Form Post route is wrong (old one)
	<div class="w-full h-full bg-base flex-col flex items-center rounded-lg p-3">
		@shared.Container() {
			<div class="w-full h-16 flex flex-col">
				<h3 class="text-lavender font-extrabold text-xl">{ mem.Name }</h3>
				<p>{ fmt.Sprintf("Age: %v",mem.Age) }</p>
			</div>
		}
		<div
			class="w-full h-full mt-1 flex flex-row"
		>
			@shared.Container() {
				@SkillAdjustList(mem)
			}
			<div class="w-2/3 h-full flex gap-1 flex-row divide-x-2 divide-base">
				@shared.Container() {
					<div class="w-1/2 h-full p-2" hx-get={ fmt.Sprintf("/api/skill?memID=%v", mem.ID) } hx-trigger="load"></div>
					<div class="w-1/2 h-full p-2" hx-get={ fmt.Sprintf("/api/team?memID=%v", mem.ID) } hx-trigger="load"></div>
				}
			</div>
		</div>
	</div>
}

templ MemberList(mems []entities.Member) {
	@components.List(
		components.ListProps{
			ListAttr: templ.Attributes{
				"hx-get":     "/partials/members/list",
				"hx-swap":    "outerHTML",
				"hx-trigger": fmt.Sprintf("%v from:body, %v from:body, every 600s", service.CreateMemberEvent, service.DeleteMemberEvent),
			}}) {
		if len(mems) > 0 {
			for _, t := range mems {
				@MemberListItem(t, true) {
					@components.DeleteMemberButton(t)
				}
			}
		} else {
			<p class="text-overlay1">No members found</p>
		}
	}
}

templ MemberCards(mems []entities.Member) {
	<div
		class="h-full w-full flex flex-row justify-start content-start flex-wrap gap-2 px-2"
		hx-get="/partials/members/cards"
		hx-swap="outerHTML"
		hx-trigger={ fmt.Sprintf("%v from:body, %v from:body, every 600s", service.CreateMemberEvent, service.DeleteMemberEvent) }
	>
		for _, m := range mems {
			@MemberCard(m)
		}
	</div>
}

templ MemberCard(m entities.Member) {
	@cmp.Card(cmp.CardProps{
		Class:      "max-h-fit max-w-sm",
		Attributes: templ.Attributes{"id": fmt.Sprintf("mem-%v", m.ID)}}) {
		@cmp.CardHeader() {
			@cmp.CardTitle() {
				@cmp.Avatar(cmp.AvatarProps{
					// TODO: add route for Avatar Images
					Name:  m.Name,
					Class: "mr-4"})
				{ m.Name }
			}
			@cmp.CardDescription() {
				{ fmt.Sprintf("Age: %v",m.Age) }
			}
		}
		@cmp.CardContent() {
			<p>Card Content</p>
		}
		@cmp.CardFooter() {
			<div class="flex justify-between w-full">
				@cmp.Button(cmp.ButtonProps{
					Text:         "Open",
					HxGet:        fmt.Sprintf("/members/%v", m.ID),
					HxTarget:     "#Content",
					HxSwap:       "innerHTML",
					HxReplaceUrl: fmt.Sprintf("/members/%v", m.ID),
				})
				@components.DeleteMemberButton(m)
			</div>
		}
	}
}

templ MemberListItem(m entities.Member, selectable bool) {
	if selectable {
		@MemberCard(m)
	} else {
		@components.ListItem(components.ListItemProps{
			Header: m.Name,
			Footer: fmt.Sprintf("Age: %v", m.Age),
		},
		) {
			{ children... }
		}
	}
}

templ MemberAddTeamList(mems []entities.Member, teamID uint) {
	@components.List(
		components.ListProps{
			ListAttr: templ.Attributes{
				"hx-get":     fmt.Sprintf("/partials/members/list?teamID=%v", teamID),
				"hx-swap":    "outerHTML",
				"hx-trigger": fmt.Sprintf("%v from:body,  %v from:body, every 600s", service.CreateMemberEvent, service.DeleteMemberEvent),
			}}) {
		if len(mems) > 0 {
			for _, m := range mems {
				@MemberListItem(m, false) {
					@cmp.Button(cmp.ButtonProps{
						Text:     "Add",
						HxGet:    fmt.Sprintf("/partials/teams/%v/members/%v", teamID, m.ID),
						HxTarget: "closest li",
						HxSwap:   "delete",
					})
				}
			}
		} else {
			<p class="text-overlay1">No members found</p>
		}
	}
}
