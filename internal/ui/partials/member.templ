package partials

import (
	"fmt"
	"github.com/pulsone21/powner/internal/entities"
	"github.com/pulsone21/powner/internal/errx"
	"github.com/pulsone21/powner/internal/service"
	"github.com/pulsone21/powner/internal/ui/components"
	"github.com/pulsone21/powner/internal/ui/shared"
)

templ MemberForm(errMap errx.ErrorMap) {
	<div id="formContainer">
		@shared.Container() {
			<div
				class="h-full flex flex-col items-center"
			>
				<h4 class="font-extrabold text-red text-2xl">{ "New Member" }</h4>
				<form
					id="memberForm"
					autocomplete="off"
					class="flex h-full justify-between w-5/6 flex-col items-center"
					hx-post="/partials/forms/members/add"
					hx-target="#formContainer"
					hx-swap="outerHTML"
				>
					<div class="w-full h-full">
						@shared.Input(templ.Attributes{"placeholder": "Name", "id": "name", "name": "name", "type": "text"}, errMap.Get("name"))
						@shared.Input(templ.Attributes{"placeholder": "Age", "id": "age", "name": "age", "type": "number"}, errMap.Get("age"))
					</div>
					<div class="h-12 w-full mt-2">
						@shared.Button("Save member", "", templ.Attributes{"type": "submit"})
					</div>
				</form>
			</div>
		}
	</div>
}

templ MemberInfo(mem entities.Member) {
	//TODO: Form Post route is wrong (old one)
	<div class="w-full h-full bg-base flex-col flex items-center rounded-lg p-3">
		@shared.Container() {
			<div class="w-full h-16 flex flex-col">
				<h3 class="text-lavender font-extrabold text-xl">{ mem.Name }</h3>
				<p>{ fmt.Sprintf("Age: %v",mem.Age) }</p>
			</div>
		}
		<div
			class="w-full h-full mt-1 flex flex-row"
		>
			@shared.Container() {
				@SkillAdjustList(mem)
			}
			<div class="w-2/3 h-full flex gap-1 flex-row divide-x-2 divide-base">
				@shared.Container() {
					<div class="w-1/2 h-full p-2" hx-get={ fmt.Sprintf("/api/skill?memID=%v", mem.ID) } hx-trigger="load"></div>
					<div class="w-1/2 h-full p-2" hx-get={ fmt.Sprintf("/api/team?memID=%v", mem.ID) } hx-trigger="load"></div>
				}
			</div>
		</div>
	</div>
}

templ MemberList(mems []entities.Member) {
	@components.List(
		components.ListProps{
			ListAttr: templ.Attributes{
				"hx-get":     "/partials/members/list",
				"hx-swap":    "outerHTML",
				"hx-trigger": fmt.Sprintf("%v from:body, %v from:body, every 600s", service.CreateMemberEvent, service.DeleteMemberEvent),
			}}) {
		if len(mems) > 0 {
			for _, t := range mems {
				@MemberListItem(t, true) {
					@components.DeleteMemberButton(t)
				}
			}
		} else {
			<p class="text-overlay1">No members found</p>
		}
	}
}

templ MemberListItem(m entities.Member, selectable bool) {
	if selectable {
		@components.ListItem(components.ListItemProps{
			Header: m.Name,
			Footer: fmt.Sprintf("Age: %v", m.Age),
			ParentAttr: templ.Attributes{
				"hx-get":         fmt.Sprintf("/partials/members/%v/details", m.ID),
				"hx-target":      "#memebrDetails",
				"hx-swap":        "innerHTML",
				"hx-replace-url": fmt.Sprintf("/members/%v", m.ID),
			}},
		) {
			{ children... }
		}
	} else {
		@components.ListItem(components.ListItemProps{
			Header: m.Name,
			Footer: fmt.Sprintf("Age: %v", m.Age),
		},
		) {
			{ children... }
		}
	}
}

templ MemberAddTeamList(mems []entities.Member, teamID uint) {
	@components.List(
		components.ListProps{
			ListAttr: templ.Attributes{
				"hx-get":     fmt.Sprintf("/partials/members/list?teamID=%v", teamID),
				"hx-swap":    "outerHTML",
				"hx-trigger": fmt.Sprintf("%v from:body,  %v from:body, every 600s", service.CreateMemberEvent, service.DeleteMemberEvent),
			}}) {
		if len(mems) > 0 {
			for _, m := range mems {
				@MemberListItem(m, false) {
					@shared.AddButton(templ.Attributes{
						"hx-trigger": "click",
						"hx-get":     fmt.Sprintf("/partials/teams/%v/members/%v", teamID, m.ID),
						"hx-target":  "closest li",
						"hx-swap":    "delete",
					}, "", "Add")
				}
			}
		} else {
			<p class="text-overlay1">No members found</p>
		}
	}
}
