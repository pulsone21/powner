package partials

import (
	"fmt"
	cmp "github.com/axzilla/templui/components"
	"github.com/axzilla/templui/icons"
	"github.com/pulsone21/powner/internal/entities"
	"github.com/pulsone21/powner/internal/service"
	"github.com/pulsone21/powner/internal/ui/components"
)

templ SkillList(skills []entities.Skill, ent entities.SkillHolder, placeholder string) {
	if len(skills) > 0 {
		<ul role="list" class="scroll-smooth min-w-52 h-full overflow-y-auto divide-y-2 divide-base">
			for _,s := range skills {
				if ent != nil {
					@SkillListItem(s, false) {
						@components.SkillItemAssignButton(s.ID, ent.GetID(), ent.GetType(), ent.HasSkill(s.ID))
					}
				} else {
					@SkillListItem(s, true) {
						@components.SkillItemDeleteButton(s.ID)
					}
				}
			}
		</ul>
	} else {
		<p class="text-overlay1">
			{ placeholder }
		</p>
	}
}

templ SkillListItem(s entities.Skill, selectable bool) {
	if selectable {
		@components.ListItem(
			components.ListItemProps{
				Header: s.Name,
				Footer: s.Description,
				ParentAttr: templ.Attributes{
					"hx-get":         fmt.Sprintf("/skills/%v", s.ID),
					"hx-target":      "#Details",
					"hx-swap":        "innerHTML",
					"hx-replace-url": fmt.Sprintf("/skills/%v", s.ID),
				}},
		) {
			{ children... }
		}
	} else {
		@components.ListItem(
			components.ListItemProps{
				Header: s.Name,
				Footer: s.Description,
				Class:  "hover:bg-background cursor-default",
			}) {
			{ children... }
		}
	}
}

templ SkillAdjustList(mem entities.Member) {
	@components.List(
		components.ListProps{
			Class: "w-full mr-1",
			ListAttr: templ.Attributes{
				"hx-get":     fmt.Sprintf("/partials/members/%v/skilllist", mem.ID),
				"hx-trigger": fmt.Sprintf("%v from:body", service.ChangeMemberEvent),
			},
		}) {
		if len(mem.Skills) > 0 {
			for _, s := range mem.Skills {
				@SkillListItem(s.Skill, false) {
					@SkillAddjustItem(fmt.Sprintf("%v", mem.ID), s)
				}
			}
		} else {
			<p class="text-overlay1">This member has no skills yet</p>
		}
	}
}

templ SkillAddjustItem(memId string, s entities.SkillRating) {
	<div class="flex flex-row gap-4 w-fit justify-start items-center">
		<div class="w-9 h-9 flex items-center justify-center">
			@cmp.Tooltip(cmp.TooltipProps{
				Trigger: cmp.Button(cmp.ButtonProps{
					Size:     cmp.ButtonSizeSm,
					Disabled: (s.Rating + 1) > 5,
					HxPost:   fmt.Sprintf("/partials/skills/%v/member/%v/%v", s.Skill.ID, memId, s.Rating+1),
					HxTarget: "closest li",
					HxSwap:   "outerHTML",
					IconLeft: icons.Plus(icons.IconProps{Size: "16"}),
					Variant:  cmp.ButtonVariantGhost,
				}),
				Content: templ.Raw("Increase Skill"),
				Side:    cmp.TooltipTop,
			})
		</div>
		<div class="w-4 h-9 flex justify-center items-center">
			<p class="">{ fmt.Sprint(s.Rating) }</p>
		</div>
		<div class="w-9 h-9 flex items-center justify-center">
			@cmp.Tooltip(cmp.TooltipProps{
				Trigger: cmp.Button(cmp.ButtonProps{
					Size:     cmp.ButtonSizeSm,
					Disabled: (s.Rating - 1) < 1,
					HxPost:   fmt.Sprintf("/partials/skills/%v/member/%v/%v", s.Skill.ID, memId, s.Rating-1),
					HxTarget: "closest li",
					HxSwap:   "outerHTML",
					IconLeft: icons.Minus(icons.IconProps{Size: "16"}),
					Variant:  cmp.ButtonVariantGhost,
				}),
				Content: templ.Raw("Decrease Skill"),
				Side:    cmp.TooltipTop,
			})
		</div>
	</div>
}
