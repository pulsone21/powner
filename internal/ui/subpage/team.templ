package subpage

import (
	"fmt"
	"github.com/axzilla/templui/components"
	"github.com/axzilla/templui/icons"
	"github.com/pulsone21/powner/internal/entities"
	"github.com/pulsone21/powner/internal/service"
	"github.com/pulsone21/powner/internal/ui/modals"
	"github.com/pulsone21/powner/internal/ui/partials"
	"github.com/pulsone21/powner/internal/ui/shared"
)

templ TeamsOverview(teams []entities.Team, topbar bool) {
	<div class="h-full w-full flex flex-row gap-1">
		<div class="h-full w-1/3 max-w-96 flex flex-col">
			@partials.TeamList(teams)
		</div>
		<div id="TeamDetails" class="space-y-2 w-full flex flex-col">
			<h2 class="font-black text-2xl">Select a Team to get more informations</h2>
			<div class="w-full h-full flex flex-col gap-2">
				@components.Skeleton(components.SkeletonProps{Class: "h-4 w-full"})
				@components.Skeleton(components.SkeletonProps{Class: "h-4 w-2/3"})
				@components.Skeleton(components.SkeletonProps{Class: "h-4 w-1/3"})
				<div>
					<div class="grid gap-6 md:grid-cols-3">
						<!-- Stats cards -->
						for i := 0; i < 3; i++ {
							<div class="p-4">
								@components.Skeleton(components.SkeletonProps{Class: "h-4 w-20 mb-2"})
								@components.Skeleton(components.SkeletonProps{Class: "h-8 w-24 mb-4"})
								<div class="flex items-center gap-2">
									@components.Skeleton(components.SkeletonProps{Class: "h-4 w-12"})
									@components.Skeleton(components.SkeletonProps{Class: "h-4 w-4"})
								</div>
							</div>
						}
					</div>
					<!-- Chart -->
					<div class="mt-4 p-4">
						@components.Skeleton(components.SkeletonProps{Class: "h-5 w-1/3 mb-6"})
						@components.Skeleton(components.SkeletonProps{Class: "h-[240px] w-full rounded-md"})
					</div>
				</div>
			</div>
		</div>
	</div>
	if topbar {
		@TeamOverviewTopbar()
	}
}

templ TeamDetails(t entities.Team, topbar bool) {
	<div class="h-full w-full max-w-sm">
		<div
			class="flex flex-col w-full gap-1 h-full"
			hx-get="/"
			hx-trigger={ fmt.Sprintf("%v from:body", service.DeleteTeamEvent) }
			hx-swap="delete"
		>
			<div class="w-full h-20 flex justify-between">
				@shared.Container() {
					<div>
						<h1 class="text-red font-extrabold text-3xl">{ t.Name } </h1>
						<p>{ t.Description } </p>
					</div>
				}
			</div>
			<div class="h-full flex flex-row gap-1">
				<div class="flex flex-col h-full min-w-fit w-96 gap-1">
					<div class="w-full h-full flex flex-col gap-1">
						@shared.Container() {
							<div
								class="w-full h-12 flex flex-row justify-between gap-1"
							>
								<span class="content-center font-semibold text-xl">Current member</span>
								<div class="w-10 h-10 mx-2">
									@modals.MemberModal(&t, nil)
								</div>
							</div>
							@components.Separator(components.SeparatorProps{
								Orientation: components.SeparatorOrientationHorizontal,
								Class:       "mb-2",
							})
							@partials.TeamMemberList(t)
						}
					</div>
					<div class="w-full h-full flex flex-col gap-1">
						@shared.Container() {
							<div
								class="w-full h-12 flex flex-row justify-between gap-1"
							>
								<span class="content-center font-semibold text-xl">Needed skills</span>
								<div class="w-10 h-10 mx-2">
									@modals.SkillModal(&t, nil)
								</div>
							</div>
							@components.Separator(components.SeparatorProps{
								Orientation: components.SeparatorOrientationHorizontal,
								Class:       "mb-2",
							})
							<div
								class="h-full w-full "
								hx-get={ fmt.Sprintf("/partials/teams/%v/skills", t.ID) }
								hx-trigger={ fmt.Sprintf("%v from:body", service.ChangeTeamEvent) }
								hx-swap="innerHTML"
							>
								@partials.SkillList(t.Skills, &t, "Team has no needed skills")
							</div>
						}
					</div>
				</div>
				// TODO: Add container templ after it is clear 
				<div
					class="w-full bg-mantle rounded-lg p-2"
					hx-get={ fmt.Sprintf("/api/team/%v/diagrams", t.ID) }
					hx-trigger="skillChange from:body"
				>
					//				@charts.DiagramList(t)
				</div>
			</div>
		</div>
	</div>
	if topbar {
		@TeamDetailsTopbar(t)
	}
}

templ TeamDetailsTopbar(t entities.Team) {
	@shared.TopBar(
		components.Breadcrumb(components.BreadcrumbProps{
			Attributes: templ.Attributes{"id": "breadcrumbs"},
			Items: []components.BreadcrumbItem{
				{
					Label: "Home",
					Href:  "/",
					Icon:  icons.House(icons.IconProps{Size: "14"}),
				},
				{
					Label: "Teams",
					Href:  "/teams",
					Icon:  icons.Users(icons.IconProps{Size: "14"}),
				},
				{
					Label:   t.Name,
					Href:    fmt.Sprintf("/teams/%v", t.ID),
					Icon:    icons.Users(icons.IconProps{Size: "14"}),
					Current: true,
				},
			},
		})) {
		@modals.NewTeamModal(nil)
	}
}

templ TeamOverviewTopbar() {
	@shared.TopBar(
		components.Breadcrumb(components.BreadcrumbProps{
			Attributes: templ.Attributes{"id": "breadcrumbs"},
			Items: []components.BreadcrumbItem{
				{
					Label: "Home",
					Href:  "/",
					Icon:  icons.House(icons.IconProps{Size: "14"}),
				},
				{
					Label:   "Teams",
					Href:    "/teams",
					Icon:    icons.Users(icons.IconProps{Size: "14"}),
					Current: true,
				},
			},
		})) {
		@modals.NewTeamModal(nil)
	}
}
